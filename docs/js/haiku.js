/* eslint-env browser */
/* globals statusOk, statusWait */

function drawHaiku(ctx, text, size, font, type) {
  // set defaults
  text = text || '';
  size = size || 12;
  type = type || 0;
  // split multiline text-
  text = text.split('\n');
  // predraw setup
  var padding = size / 3;
  var outline = size / 8;
  var blur = outline * 2;
  ctx.font = size + 'px "' + font + '"';
  ctx.fillStyle = ['white', 'white'][type];
  ctx.shadowColor = ['black', 'black'][type];
  ctx.lineWidth = outline;
  for (var i = 0; i < text.length; i++) {
    var x = type
      ? ctx.canvas.width - padding - ctx.measureText(text[i]).width
      : padding;
    var y = ctx.canvas.height - padding - (1.15 * size * (text.length - 1 - i));
    // draw shadows
    ctx.shadowBlur = blur;
    ctx.strokeText(text[i], x, y);
    // draw text
    ctx.shadowBlur = 0;
    ctx.fillText(text[i], x, y);
  }
}

function connected(socket) { // eslint-disable-line no-unused-vars
  var imgOptions = '?auto=compress&cs=tinysrgb&h=1200';
  // get query parameters
  var bnum = window.location.search.slice(1);
  // set haiku event actions
  socket.on('haiku', function (haiku) {
    statusWait('downloading...');
    // dim current visualiation
    var visualization = document.getElementById('visualization');
    visualization.style.opacity = 0;
    // remove any existing description class elements
    var footer = document.getElementsByTagName('footer')[0];
    var desc = footer.getElementsByClassName('desc');
    if (desc.length) footer.removeChild(desc[0]);
    // create new description from recv'd data
    desc = document.createElement('div');
    desc.className = 'desc';
    footer.appendChild(desc);
    var descq = document.createElement('q');
    descq.setAttribute('cite', haiku.img.srcurl);
    descq.textContent = haiku.img.desc;
    desc.appendChild(descq);
    var desca = document.createElement('a');
    desca.setAttribute('href', haiku.img.authorurl);
    desca.textContent = haiku.img.author + ' on ' + haiku.img.srcid;
    desc.appendChild(desca);
    // create new image to preload source image
    var img = document.createElement('img');
    img.setAttribute('crossorigin', 'anonymous');
    // stamp image with haiku and attribution on load event
    img.onload = function () {
      // store source image reference size
      var ref = Math.min(this.naturalWidth, this.naturalHeight);
      // create haiku visualization
      var canvas = document.createElement('canvas');
      canvas.width = this.naturalWidth;
      canvas.height = this.naturalHeight;
      var ctx = canvas.getContext("2d");
      ctx.drawImage(this, 0, 0);
      // draw haiku
      drawHaiku(ctx, haiku.str, Math.ceil(ref / 17), 'Roboto');
      // draw attribution
      var attribution = 'Mochimap âœ¿ Haiku #' + haiku.num + '\n';
      attribution += 'Photo by ' + haiku.img.author + ' on ' + haiku.img.srcid;
      drawHaiku(ctx, attribution, Math.ceil(ref / 35), 'Nunito Sans', 1);
      // set visualization source and reveal image
      visualization.src = canvas.toDataURL();
      visualization.style.opacity = 1;
      // set connection status ok
      statusOk(haiku.num);
    };
    // begin preload
    img.src = haiku.img.src + imgOptions;
  });
  // request haiku
  statusWait('reqHaiku#' + (bnum || 'latest'));
  socket.emit('haiku', { bnum: bnum } || {});
}
    
/* Share image (mobile only) */
function share(canvas) {
  if (!navigator.share) {
    alert('navigator.share functionality is unavailable.');
    return;
  }
  var blob = canvas.toBlob(function() {
    var file = new File([blob], 'haiku.webp', { type: blob.type });
    navigator.share({
      title: 'Mochimo Haiku Visualized',
      text: 'This image was generated by Mochimap using haiku from the Mochimo Cryptocurrency Network!',
      files: [file],
    });
  }, 'image/webp');
}